Name: Jihyun Yoon
Email: jyoon31@myseneca.ca
Student Number: 124558172

1) Why do you need to allocate new dynamic memory when you increase the
size of an existing array of dynamically allocated memory?

Dynamic memory is an address pointing static memory. So, once we choose a size of the memory, 
it placed in a static memory which means the array size is not dynamical since we determine the size. 
As a result, if we want to change the size of it, 
we should place this data in new static memory then make the dynamic variable to point it. 


2) The Kingdom structure stores the name of the kingdom in an array of characters.
At the end of the program, we do not use the delete operator to deallocate
the memory occupied by the name. Why don’t we need to use the
delete operator on this array itself? Explain.

Because the name of the kingdom does not have dynamic memory but a static memory.
In case of dynamic memory, it can occur memory issues such as memory leaking if we do not deallocate it.
However, in case of static memory, it becomes available when the placed variable is out of its scope.
Therefore, we do not have to deallocate manually.


3) There are two display(...) function definitions. How does the compiler
know which definition to call from your main function?

The compiler figure it out by a function's signature.
a function's signature are 
- the function identifier
- the parameter types (ignoring const qualifiers or address of operators as described in references below)
- the order of the parameter types
If one or more of them are different, the compiler can realize they are overloaded functions.


4) Explain what have you have learned in this workshop.
- How to make overloaded function and use it.
- How to use dynamic memory.
- How to resize the array in term of a dynamic memory
- Learned that if I just drag files into the projects, it doesn't copy them but just link them.


Quiz 01 Reflection
- What are the three main characteristics that a language must have in order to be called an OOP language? Enumerate them and explain one(any) in a short sentence?
1. Encapsulation
2. nheritance
3. Polymorphism
Explain of Ecnapsulation
: it hides the details within a class such as internal data or logic.
- Member functions of a class can be classified into three mutually exclusive categories Enumerate them.
1. queries
2. moidifiers
3. special
- Explain the meaning of the keyword private in C++
"private" identifies all subsequent members listed in the class definition as inaccessible.

Quiz 02 Reflection
I got wrong about header guard
I put
	#ifndef utillity_h #define 
	utillity_h
as the 15 mins for quiz was finished.
I should've done like
	#ifndef utillity_h 
	#define utillity_h